from datetime import datetime

from bson import ObjectId

from app.models.events import Event, EventUpdate
from pydantic import ValidationError
from app.core.mongo_config import db
from copy import deepcopy
from bson import ObjectId, errors


def create_event_service(event_data: dict, action: str):
    try:
        event = Event(**event_data)
        print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {event}")

        event_dict = event.dict()
        event_dict.setdefault("status", "–ù–æ–≤–æ–µ")

        # –î–æ–±–∞–≤–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        event_dict["created_at"] = datetime.utcnow()
        event_dict["updated_at"] = datetime.utcnow()

        # created_by –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ event_data
        event_dict["created_by"] = event_data.get("created_by")
        event_dict["updated_by"] = event_data.get("created_by")

        # –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å ObjectId –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
        event_to_insert = deepcopy(event_dict)
        inserted = db.events.insert_one(event_to_insert)
        inserted_id = str(inserted.inserted_id)
        print(f"üóÇÔ∏è –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å _id: {inserted_id}")

        # –í—Å—Ç–∞–≤–ª—è–µ–º _id –≤–Ω—É—Ç—Ä—å event
        event_dict["_id"] = inserted_id
        event_dict["created_at"] = event_dict["created_at"].isoformat()
        event_dict["updated_at"] = event_dict["updated_at"].isoformat()

        return {
            "action": action,
            "message": {
                "status": "success",
                "event": event_dict
            }
        }

    except ValidationError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        return {
            "action": action,
            "message": {
                "status": "error",
                "details": str(e)
            }
        }


def update_event_service(event_data: dict, action: str):
    try:
        event_id = event_data.get("_id")
        if not event_id:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω _id —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

        # –£–¥–∞–ª—è–µ–º _id –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        update_fields = {k: v for k, v in event_data.items() if k != "_id"}

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
        update_model = EventUpdate(**update_fields)
        update_dict = update_model.dict(exclude_unset=True)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—è
        if "start_datetime" in update_dict:
            update_dict["start_datetime"] = update_dict["start_datetime"]

        update_dict["updated_at"] = datetime.utcnow()

        result = db.events.update_one(
            {"_id": ObjectId(event_id)},
            {"$set": update_dict}
        )

        if result.matched_count == 0:
            raise ValueError(f"–°–æ–±—ã—Ç–∏–µ —Å _id {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        update_dict["_id"] = event_id
        update_dict["updated_at"] = update_dict["updated_at"].isoformat()
        print(f"üîÑ –°–æ–±—ã—Ç–∏–µ {event_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

        return {
            "action": action,
            "message": {
                "status": "success",
                "event": update_dict
            }
        }

    except (ValidationError, ValueError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        return {
            "action": action,
            "message": {
                "status": "error",
                "details": str(e)
            }
        }


def delete_event_service(event_data: dict, action: str):
    try:
        event_id = event_data.get("_id")
        if not event_id:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω _id —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

        result = db.events.delete_one({"_id": ObjectId(event_id)})

        if result.deleted_count == 0:
            raise ValueError(f"–°–æ–±—ã—Ç–∏–µ —Å _id {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        print(f"üóëÔ∏è –°–æ–±—ã—Ç–∏–µ {event_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")

        return {
            "action": action,
            "message": {
                "status": "success",
                "_id": event_id
            }
        }

    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        return {
            "action": action,
            "message": {
                "status": "error",
                "details": str(e)
            }
        }


def register_volunteer_service(event_data: dict, action: str):
    try:
        event_id = event_data.get("_id")
        user_id = event_data.get("user_id")

        if not event_id or not user_id:
            raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è _id –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ user_id")

        try:
            event_oid = ObjectId(event_id)
        except (errors.InvalidId, TypeError):
            raise ValueError(f"_id '{event_id}' ‚Äî –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ObjectId")

        event = db.events.find_one({"_id": event_oid})
        if not event:
            raise ValueError(f"–°–æ–±—ã—Ç–∏–µ —Å _id {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        volunteers = event.get("volunteers", [])
        max_volunteers = event.get("required_volunteers", 0)

        # –£–∂–µ –∑–∞–ø–∏—Å–∞–Ω?
        if user_id in volunteers:
            return {
                "action": action,
                "message": {
                    "status": "error",
                    "details": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
                }
            }

        # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç?
        if len(volunteers) >= max_volunteers:
            return {
                "action": action,
                "message": {
                    "status": "error",
                    "details": "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
                }
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º
        result = db.events.update_one(
            {"_id": event_oid},
            {
                "$addToSet": {"volunteers": user_id},
                "$set": {"updated_at": datetime.utcnow()}
            }
        )

        if result.modified_count == 0:
            raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞")

        print(f"ü§ù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {event_id}")

        return {
            "action": action,
            "message": {
                "status": "success",
                "_id": event_id,
                "user_id": user_id
            }
        }

    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞: {e}")
        return {
            "action": action,
            "message": {
                "status": "error",
                "details": str(e)
            }
        }


def unregister_volunteer_service(event_data: dict, action: str):
    try:
        event_id = event_data.get("_id")
        user_id = event_data.get("user_id")

        if not event_id or not user_id:
            raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è _id –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ user_id")

        try:
            event_oid = ObjectId(event_id)
        except (errors.InvalidId, TypeError):
            raise ValueError(f"_id '{event_id}' ‚Äî –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ObjectId")

        event = db.events.find_one({"_id": event_oid})
        if not event:
            raise ValueError(f"–°–æ–±—ã—Ç–∏–µ —Å _id {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        if user_id not in event.get("volunteers", []):
            return {
                "action": action,
                "message": {
                    "status": "error",
                    "details": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
                }
            }

        result = db.events.update_one(
            {"_id": event_oid},
            {
                "$pull": {"volunteers": user_id},
                "$set": {"updated_at": datetime.utcnow()}
            }
        )

        if result.modified_count == 0:
            raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞")

        print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–æ–±—ã—Ç–∏—è {event_id}")

        return {
            "action": action,
            "message": {
                "status": "success",
                "_id": event_id,
                "user_id": user_id
            }
        }

    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞: {e}")
        return {
            "action": action,
            "message": {
                "status": "error",
                "details": str(e)
            }
        }


def get_upcoming_events_service(event_data: dict, action: str):
    try:
        limit = event_data.get("limit", 10)

        now = datetime.utcnow()

        events_cursor = db.events.find({
            "start_datetime": {"$gt": now}
        }).sort("start_datetime", 1).limit(limit)

        events = []
        for event in events_cursor:
            event["_id"] = str(event["_id"])
            if "created_at" in event:
                event["created_at"] = event["created_at"].isoformat()
            if "updated_at" in event:
                event["updated_at"] = event["updated_at"].isoformat()
            if "start_datetime" in event:
                event["start_datetime"] = event["start_datetime"].isoformat()
            events.append(event)

        return {
            "action": action,
            "message": {
                "status": "success",
                "events": events
            }
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
        return {
            "action": action,
            "message": {
                "status": "error",
                "details": str(e)
            }
        }


def get_user_events_service(event_data: dict, action: str):
    try:
        user_id = event_data.get("user_id")
        if not user_id:
            raise ValueError("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω user_id")

        # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        created_cursor = db.events.find({"created_by": user_id})
        created_events = []
        for event in created_cursor:
            event["_id"] = str(event["_id"])
            if "start_datetime" in event:
                event["start_datetime"] = event["start_datetime"].isoformat()
            if "created_at" in event:
                event["created_at"] = event["created_at"].isoformat()
            if "updated_at" in event:
                event["updated_at"] = event["updated_at"].isoformat()
            created_events.append(event)

        # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≥–¥–µ –æ–Ω –≤–æ–ª–æ–Ω—Ç–µ—Ä
        volunteer_cursor = db.events.find({"volunteers": user_id})
        volunteer_events = []
        for event in volunteer_cursor:
            event["_id"] = str(event["_id"])
            if "start_datetime" in event:
                event["start_datetime"] = event["start_datetime"].isoformat()
            if "created_at" in event:
                event["created_at"] = event["created_at"].isoformat()
            if "updated_at" in event:
                event["updated_at"] = event["updated_at"].isoformat()
            volunteer_events.append(event)

        return {
            "action": action,
            "message": {
                "status": "success",
                "created_events": created_events,
                "volunteer_events": volunteer_events
            }
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return {
            "action": action,
            "message": {
                "status": "error",
                "details": str(e)
            }
        }
